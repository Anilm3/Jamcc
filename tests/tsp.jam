##################################################################################
# JAM v1.0 - tsp.jam                                                             #
#                                                                                #
# Copyright (C) 2010 Anil Motilal Mahtani Mirchandani(anil.mmm@gmail.com)        #
#                    Mikel Ganuza Estremera(mikel.ganuza101@estudiantes.ulpgc.es)#
# License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>  #
# This is free software: you are free to change and redistribute it.             #
# There is NO WARRANTY, to the extent permitted by law.                          #
#                                                                                #
##################################################################################

#TSP con distancia de Manhattan y sin ciudad inicial/final

const int n_cities = 10
int cities[20] = [1, 1, 5, 5, 2, 3, 4, 5, 9, 2, 3, 4, 10, 15, 1, 0, 5, 19, 4, 8]
int solution[10]
int distance = 2147483647
int distances[100]

#Valor absoluto
int abs(int val)
	if(val < 0)
		return -val
	else
		return val
	end
end

#Distancia de Manhattan
int calc_dis(int x1,int x2,int y1,int y2)
	return (abs(x2-x1)+abs(y2-y1))
end

#Busqueda de distancia minima
void calculate_tsp(int vector[])
	int i
	int j
	int ldis = 0
	
	for(i = 0; i < (n_cities-1) ; i = i + 1) 
		j = i + 1
		ldis = ldis + distances[vector[i]*n_cities + vector[j]]
	end
	
	if(distance > ldis)
		distance = ldis
		for(i = 0; i < n_cities ;i = i + 1) 
			solution[i] = vector[i]
		end
	end
end

void obtain_tsp(int vector[], int index)
	int i
	int j
	int n
	bool found
	for(i = 0 ; i < n_cities ; i = i + 1)
		found = false
		for(j = 0 ; j < index ; j = j + 1)
			if(vector[j] == i)
				found = true
				break
			end
		end
		if(found)
			continue
		end
		if(index == (n_cities-1))
			vector[index] = i
			calculate_tsp(vector)
		else
			vector[index] = i
			obtain_tsp(vector, index+1)
		end
	end
end

int main()
	int i
	int j
	int k
	int m
	int n
	int vector[10]
	
	#Generacion de matriz de distancias
	for(i = 0; i < n_cities; i = i + 1)
		for(j = 0; j < n_cities; j = j + 1)
			k = i*n_cities + j
			distances[k] = calc_dis(cities[i*2],cities[j*2],cities[i*2+1],cities[j*2+1])
		end
	end
	
	#Llamada a TSP
	obtain_tsp(vector, 0)
	
	#Impresion de solucion
	<++"Solucion: "
	for(i = 0; i < n_cities; i = i + 1)
		<++solution[i]++" "
	end
	<++"\n"
end
